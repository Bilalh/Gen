language Essence 1.3

$ Number of nodes
given N : int(1..20)
letting num_nodes be domain int(1..N)

$ Directed edges, (a,b) means a depends on the value of b.
given Edges : set ( maxSize (N * (N-1)) / 2 ) of (num_nodes, num_nodes)

$ The generation order indexed by the node id
find ordering : function(total) num_nodes --> num_nodes
find levels : function num_nodes --> set (maxSize N) of num_nodes

find levelsNeeded : num_nodes

such that
	$ Nodes that are depend on other nodes are placed first
	forAll (fro,to) in Edges .
		ordering(to) < ordering(fro),

	levelsNeeded = max(range(ordering)),
	levelsNeeded = max(defined(levels)),

	forAll i in range(ordering) .
		levels(i) = preImage(ordering,i)

$ We want the nodes in the lastest group possible
minimising max(range(ordering)) * 1000 - sum([ i * |j| | (i,j) <- levels  ])


$ 1 n_upper    2 n_boats
$ 3 n_periods  4 capacity
$ 5 crew       6 ex1

$ PPP
$ (capacity, n_boats)     (4,2)
$ (capacity, n_upper)     (4,1)
$ (crew, n_boats)         (5,2)
$ (crew, n_upper)         (5,1)

$ solution: PPP
$ levels        function(1 --> {1, 2}, 2 --> {3, 4, 5})
$ levelsNeeded  2
$ ordering      function(1 --> 1, 2 --> 1, 3 --> 2, 4 --> 2, 5 --> 2)
$ VarInfo {givens = fromList ["n_boats","n_upper"]}

$ Ordering 1
$  (capacity, n_boats)  (4, 2),
$  (capacity, n_upper)  (4, 1),
$  (crew, n_boats)      (5, 2),
$  (crew, n_upper)      (5, 1),
$  (ex1, crew)          (6, 5),
$  (ex1, n_boats)       (6, 2),
$  (ex1, n_upper)       (6, 1)

$ solution: Ordering 1
$ levels        function(1 --> {1, 2}, 2 --> {5}, 3 --> {3, 4, 6}))
$ levelsNeeded  3
$ ordering      function(1 --> 1, 2 --> 1, 3 --> 3, 4 --> 3, 5 --> 2, 6 --> 3)


