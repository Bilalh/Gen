language Essence 1.3

given n_upper      : int(1..30)
given n_stores     : int(1..30)
given n_warehouses : int(1..30)

letting Store  be domain int(1..n_stores)
letting WHouse be domain int(1..n_warehouses)

find capacity : function (total) WHouse --> int(1..n_upper)
find opencost : function (total) WHouse --> int(1..n_upper)
find cost     : function (total) (Store, WHouse) --> int(1..n_upper)


given n_upper~org      : int(1..30)
given n_stores~org     : int(1..30)
given n_warehouses~org : int(1..30)

letting Store_org  be domain int(1..n_stores~org)
letting WHouse_org be domain int(1..n_warehouses~org)

given capacity~org : function (total) WHouse_org --> int(1..n_upper~org)
given opencost~org : function (total) WHouse_org --> int(1..n_upper~org)
given cost~org     : function (total) (Store_org, WHouse_org) --> int(1..n_upper~org)


given capacity~radius : int(1..1000)
given opencost~radius : int(1..1000)
given cost~radius     : int(1..1000)

$Theses are preset so why find the dist?
find capacitydist     : int(0..10000)
find opencostdist     : int(0..10000)
find costdist         : int(0..10000)

maximising ( capacitydist + opencostdist + costdist )

such that 

capacitydist = 
    ( sum i1 : WHouse .  
        ( capacity(i1) - capacity~org(i1) ) ** 2 
    ), 

opencostdist = 
    ( sum i1 : WHouse .  
        ( opencost(i1) - opencost~org(i1) ) ** 2 
    ), 

costdist = 
    (sum  i1 : Store . 
         sum i2 : WHouse .  
             ( cost(  (i1,i2) ) - cost~org(  (i1, i2 )  )) ** 2  
    ),

capacitydist < capacity~radius,
opencostdist < opencost~radius,
costdist     < cost~radius 

