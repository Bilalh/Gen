radius:
  If the radius is too high then a instance could say all other instances are useless


invaild instances:
some instances are not vaild e.g  for ppp

 language Essence 1.3
letting n_upper be 1
letting n_boats be 1
letting n_periods be 4
letting capacity be function( 1 --> 1 )
letting crew be function( 1 --> 1 )

not vaild beacuse the eprimes of 0001.eprime says
forAll v__0 : int(1..n_boats - 1)

gives warnings and errors
WARNING: interval 1..0 is out of order. Rewriting to empty interval.
0002 0d9b17  aux80
0002 0d9b17  [(minimising hosts_SetExplicitVarSize_tuple1_00000
0002 0d9b17  <-tv>aux80)]

0001 0d9b17  Exception in thread "Thread-0" java.lang.AssertionError
0001 0d9b17    at savilerow.treetransformer.TreeTransformerBottomUp.transform.TreeTransformerBottomUp.java:99)
0001 0d9b17    at savilerow.model.Model.transform(Model.java:151)
0001 0d9b17    at savilerow.model.ModelContainer.instanceFlattening(ModelContainer.java:661)
0001 0d9b17    at savilerow.model.ModelContainer.process(ModelContainer.java:65)
0001 0d9b17    at savilerow.SRWorkThread.run(SRWorkThread.java:74)


Also java or SR has weird behaviour of return 0 on asserts

Method improvements:
  Assume models total for a race T_m

  Since trivial instances can be discriminating, instead of generating the first instance using T_M seconds, use T_m to genrate 10 instances by using T_m/10 seconds  each

  Use T_m as the maximum limit.

  Start at T_m / 100 and `race` for instances. After either finding discriminating instances or we done a set number of instances, increases the timeout  by some factor e.g doubling , exp. Should help give  instances of various difficulties.

  The effect of points in the radius of influence should be based on how close the point is.

  Restarts like idea when using minion, if a instance takes too long to generate?

Racing with model generation:

  Start with compact (C)
  Generate R random models
  Generate K instances  using the method
    with some prop of trivial, medium and hard instance (in terms of solving time)

  Backpropage how good the instances were on the models as well as rules that were applied. The vary rules used in some way (e.g genetic algorithms) or MCTS like ideas, plus some random solvers.  Run the new models on some the instances generated (the discriminating onces + a few trival + few timed out) for each factures, + L new instances on all current models

influance radius:
How to choose it?
  ☐ As a % of the maximum (eclin) distance. Does not take account of dimensionaity. e.g
      if we have
      bool
      int (1..100)
      func total  1..100 --> 1..100

      the bool is under rep
  ☐  Use a different radius for each param,  could work but more complex


Chain:


Idea is to pick the next point inside the radius of previous point. Problem with this are
  ☐ Bias at the edges  (but do we still care about the bias?)
  ☐ how large to we make the radius

 Process for generated essence for instance generation to work with an radius

  eclid distance:
   as in the above example, the bool does not count for much. so use a  radius for each param

  use a radius for each param as follows:
    not sure how to express in essence

    ☐ for each find F (since we have dependent params we can't make every given to find)
    ☐ add a new given F~org with same domain and a new constrain
      ☐  Need to account for new vars have different number of elements and nested types
      ☐  int   |F - F~org| <=  radius
      ☐  total int --> int
        forAll i : Boat .
          |crew(i) -  crew~org(i)| <= radius,
      ☐  tuples
          forAll i : tupleDom .
            |tup[i]  - tup~org[i]| <= radius
      ☐  sets
          |S - S~org| + |S~org - S| <= radius
          What to do with nested sets?

      ☐ relation
          ?
      ☐ partition
          ?


Model portfolios:
   Currently using the hitting set idea.

   Once we have the final set of models to use which model should be used to solve an unseen instances E?
     ☐ Nearest Neighbor, find the instance that is closest to the E, and pick the model(s) which have the best expected runtime performance.  Kind of like `Algorithm Selection and Scheduling` in CP2011






