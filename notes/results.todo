steelmil:
  smac wins but on  2 out 3 runs it found nothing.
  on 25 races it was sat
  on 5 races it  was unsat

  both times it was the last param that was tried that discriminating

                            prob038-steel
   method_opts2    races mean  sd    min max
   nsample, 4, 0,0 1     160.0  0.00 160 160
                   5     160.0  0.00 160 160
                   25    160.0  0.00 160 160
   smac,0          1     160.0  0.00 160 160
                   5     117.3 73.90  32 160
                   25    117.3 73.90  32 160
   uniform,0       1     160.0  0.00 160 160
                   5     152.3 13.28 137 160
                   25    160.0  0.00 160 160

Sonet:

Since the essence allows the  demand can be empty, this results in thing like this being Generated.

1093b67631b5e55bfde7d8c13b077aadbd0f14be568a0a17fed5aa9700d5205e8dfea28b55c1b6147aa06ce5ee8e99f841b806aeec7bc9ca62c7bb5acdb78a70.param

5 non Dominated model

total time
4 seconds  (0.01 minion)  on best 0064
20 seconds (1.56 minion)  on worst 0050


language Essence 1.3
letting nnodes be 16
letting nrings be 12
letting capacity be 10
letting demand be {}

with solution

letting network be mset({}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {})

wherehouse:
  after 5 mins  minion was not able to produce the param  (tried 10 times)

  /Users/bilalh/CS/instancegen/mchain/__/ns/param_gen

  Probably because the eprime has domains like this   (max 900 elements each with 30 values )
      matrix indexed by [int(1..n_stores * n_warehouses * n_upper)] of int(1..n_warehouses)

  look for better rules for
  cost : function (total) tuple (Int1, Int2) --> int(1..n_upper)

  what about?

  cost_tuple1 : function (total) Int1 --> int(1..n_upper)
  cost_tuple2 : function (total) Int2 --> int(1..n_upper)

  with some extra constrsints

  a b    1 2 3

  a  1
  a  2
  a  3
  b  1
  b  2
  b  3







