#Progressive Party Problem
prob013-party
Used in CP13
81 model in no-chanelling


3 ints

2 functions



Enforce ordering of params

n_upper
n_boats
n_periods
host
sched

Need to parse domains, could use conjure's json output


treat a set as a bit string  e.g occ rep.


function as  set of tuples.   Could try cross product

import itertools as it
list(it.product( [1,2,3], [1,2,3]))
[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]

and treat it as a bit string.  problems with this are

[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]
  1       1         0       0      1        0      0      0       1

--------    -----------
         1

 that it could generate invaild combination see above.  ways around this could be to say the sum of
each of the three subsequences must sum to 1. This is getting a bit compatinted


total function
 function (total) Boat --> int(1..n_upper)

1 to 5     -->   1 to 12


genrate 12 Independent values  instead



ways of generating

Just order parameters by some given ordering

try to group the paramters

generate the the ints then the functions


----------
|         |
|         |
|    x    |     -> ------
|         |        |     |
----------|        |_____|


e.g pick from the first `grid` then pick from second grid.




Also change eprime ordering to what worked well before e.g. `best first`ish



Change quailty from

	if minionTimeout == 0:
		return 1
	elif minionTimeout == count:

		return 1
	else:
		return 1 - (isDominated / count)


to
	if minionTimeout == count:
		return 1
	return 1 - (isDominated / count)


since models can still be Dominated if they all finish



PPP Dependencies

forall i in Boat .
	crew(i) <= capacity

The size of the crew has to be <= the capacity of the both

dependencies how to model them?
with essence? need parser
with json or grasp-json? could work

if using  essence then generate the candidate param  then generate another essence file
and use conjure's full evaluator to check it.





